#! <?xml version="1.0" encoding="UTF-8" ?>
#! <WORKSPACE
#    Command-line to run this workspace:
#        /opt/fme-desktop-2018/fme /home/justin/Documents/waterFlow/fmeWorkspaces/import/index.fmw
#    
#!   ATTR_TYPE_ENCODING="SDF"
#!   BEGIN_PYTHON=""
#!   BEGIN_TCL=""
#!   CATEGORY=""
#!   DESCRIPTION=""
#!   DESTINATION="NONE"
#!   DESTINATION_ROUTING_FILE=""
#!   DOC_EXTENTS="1660.02 1442.01"
#!   DOC_TOP_LEFT="165.502 -1648.02"
#!   END_PYTHON=""
#!   END_TCL=""
#!   EXPLICIT_BOOKMARK_ORDER="false"
#!   FME_BUILD_NUM="18295"
#!   FME_DOCUMENT_GUID="60cadd2f-701a-4952-9cfa-9c24a1bd8e61"
#!   FME_DOCUMENT_PRIORGUID="0e500b69-8d30-4f50-a240-7c71c2a81b3d"
#!   FME_GEOMETRY_HANDLING="Enhanced"
#!   FME_IMPLICIT_CSMAP_REPROJECTION_MODE="Auto"
#!   FME_REPROJECTION_ENGINE="FME"
#!   FME_SERVER_SERVICES=""
#!   FME_STROKE_MAX_DEVIATION="0"
#!   HISTORY=""
#!   IGNORE_READER_FAILURE="No"
#!   LAST_SAVE_BUILD="FME(R) 2018.0.0.1 (20180328 - Build 18295 - linux-x64)"
#!   LAST_SAVE_DATE="2018-08-09T15:06:39"
#!   LOG_FILE=""
#!   LOG_MAX_RECORDED_FEATURES="200"
#!   MARKDOWN_DESCRIPTION=""
#!   MARKDOWN_USAGE=""
#!   MAX_LOG_FEATURES="200"
#!   MULTI_WRITER_DATASET_ORDER="BY_ID"
#!   PASSWORD=""
#!   PYTHON_COMPATIBILITY="27"
#!   REDIRECT_TERMINATORS="NONE"
#!   SHOW_ANNOTATIONS="true"
#!   SHOW_INFO_NODES="true"
#!   SOURCE="NONE"
#!   SOURCE_ROUTING_FILE=""
#!   TERMINATE_REJECTED="YES"
#!   TITLE=""
#!   USAGE=""
#!   USE_MARKDOWN=""
#!   VIEW_POSITION="6.00006 18.0002"
#!   WARN_INVALID_XFORM_PARAM="Yes"
#!   WORKSPACE_VERSION="1"
#!   ZOOM_SCALE="100"
#! >
#! <DATASETS>
#! </DATASETS>
#! <DATA_TYPES>
#! </DATA_TYPES>
#! <GEOM_TYPES>
#! </GEOM_TYPES>
#! <FEATURE_TYPES>
#! </FEATURE_TYPES>
#! <FMESERVER>
#! </FMESERVER>
#! <GLOBAL_PARAMETERS>
#! </GLOBAL_PARAMETERS>
#! <COMMENTS>
#! </COMMENTS>
#! <CONSTANTS>
#! </CONSTANTS>
#! <BOOKMARKS>
#! </BOOKMARKS>
#! <TRANSFORMERS>
#! <TRANSFORMER
#!   IDENTIFIER="2"
#!   TYPE="Creator"
#!   VERSION="5"
#!   POSITION="165.5016550165501 -611.0061100611008"
#!   BOUNDING_RECT="165.5016550165501 -611.0061100611008 -1 -1"
#!   ORDER="500000000000001"
#!   PARMS_EDITED="true"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="18295"
#! >
#!     <OUTPUT_FEAT NAME="CREATED"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <XFORM_PARM PARM_NAME="ATEND" PARM_VALUE="no"/>
#!     <XFORM_PARM PARM_NAME="COORDS" PARM_VALUE="&lt;Unused&gt;"/>
#!     <XFORM_PARM PARM_NAME="COORDSYS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="CRE_ATTR" PARM_VALUE="_creation_instance"/>
#!     <XFORM_PARM PARM_NAME="GEOM" PARM_VALUE="&lt;lt&gt;?xml&lt;space&gt;version=&lt;quote&gt;1.0&lt;quote&gt;&lt;space&gt;encoding=&lt;quote&gt;US_ASCII&lt;quote&gt;&lt;space&gt;standalone=&lt;quote&gt;no&lt;quote&gt;&lt;space&gt;?&lt;gt&gt;&lt;lt&gt;geometry&lt;space&gt;dimension=&lt;quote&gt;2&lt;quote&gt;&lt;gt&gt;&lt;lt&gt;null&lt;solidus&gt;&lt;gt&gt;&lt;lt&gt;&lt;solidus&gt;geometry&lt;gt&gt;"/>
#!     <XFORM_PARM PARM_NAME="GEOMTYPE" PARM_VALUE="Geometry Object"/>
#!     <XFORM_PARM PARM_NAME="NUM" PARM_VALUE="1"/>
#!     <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="Creator"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#!   IDENTIFIER="3"
#!   TYPE="WorkspaceRunner"
#!   VERSION="3"
#!   POSITION="884.50330503305042 -206.00206002060037"
#!   BOUNDING_RECT="884.50330503305042 -206.00206002060037 -1 -1"
#!   ORDER="500000000000002"
#!   PARMS_EDITED="true"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="18295"
#! >
#!     <OUTPUT_FEAT NAME="SUCCEEDED"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <OUTPUT_FEAT NAME="FAILED"/>
#!     <FEAT_COLLAPSED COLLAPSED="1"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <XFORM_ATTR ATTR_NAME="_failure_message" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <OUTPUT_FEAT NAME="SUMMARY"/>
#!     <FEAT_COLLAPSED COLLAPSED="2"/>
#!     <XFORM_ATTR ATTR_NAME="_proc_count" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_ATTR ATTR_NAME="_processes{}" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_PARM PARM_NAME="BLOCKING" PARM_VALUE="No"/>
#!     <XFORM_PARM PARM_NAME="MAX_PROC" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="MAX_TO_BATCH" PARM_VALUE="1"/>
#!     <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="PARAMETER_TYPES" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_FILE" PARM_VALUE="$(FME_MF_DIR)usgs/index.fmw"/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_PARAMETERS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WS_PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="WorkspaceRunner"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#!   IDENTIFIER="5"
#!   TYPE="WorkspaceRunner"
#!   VERSION="3"
#!   POSITION="884.50330503305042 -611.0061100611008"
#!   BOUNDING_RECT="884.50330503305042 -611.0061100611008 -1 -1"
#!   ORDER="500000000000003"
#!   PARMS_EDITED="true"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="18295"
#! >
#!     <OUTPUT_FEAT NAME="SUCCEEDED"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <OUTPUT_FEAT NAME="FAILED"/>
#!     <FEAT_COLLAPSED COLLAPSED="1"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <XFORM_ATTR ATTR_NAME="_failure_message" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <OUTPUT_FEAT NAME="SUMMARY"/>
#!     <FEAT_COLLAPSED COLLAPSED="2"/>
#!     <XFORM_ATTR ATTR_NAME="_proc_count" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_ATTR ATTR_NAME="_processes{}" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_PARM PARM_NAME="BLOCKING" PARM_VALUE="No"/>
#!     <XFORM_PARM PARM_NAME="MAX_PROC" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="MAX_TO_BATCH" PARM_VALUE="1"/>
#!     <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="PARAMETER_TYPES" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_FILE" PARM_VALUE="$(FME_MF_DIR)noaa/index.fmw"/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_PARAMETERS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WS_PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="WorkspaceRunner_2"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#!   IDENTIFIER="7"
#!   TYPE="WorkspaceRunner"
#!   VERSION="3"
#!   POSITION="884.50330503305031 -947.00947009470087"
#!   BOUNDING_RECT="884.50330503305031 -947.00947009470087 -1 -1"
#!   ORDER="500000000000004"
#!   PARMS_EDITED="true"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="18295"
#! >
#!     <OUTPUT_FEAT NAME="SUCCEEDED"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <OUTPUT_FEAT NAME="FAILED"/>
#!     <FEAT_COLLAPSED COLLAPSED="1"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <XFORM_ATTR ATTR_NAME="_failure_message" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <OUTPUT_FEAT NAME="SUMMARY"/>
#!     <FEAT_COLLAPSED COLLAPSED="2"/>
#!     <XFORM_ATTR ATTR_NAME="_proc_count" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_ATTR ATTR_NAME="_processes{}" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_PARM PARM_NAME="BLOCKING" PARM_VALUE="No"/>
#!     <XFORM_PARM PARM_NAME="MAX_PROC" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="MAX_TO_BATCH" PARM_VALUE="1"/>
#!     <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="PARAMETER_TYPES" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_FILE" PARM_VALUE="$(FME_MF_DIR)coloradoDWR/index.fmw"/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_PARAMETERS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WS_PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="WorkspaceRunner_3"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#!   IDENTIFIER="9"
#!   TYPE="WorkspaceRunner"
#!   VERSION="3"
#!   POSITION="884.50330503305042 -1310.0131001310015"
#!   BOUNDING_RECT="884.50330503305042 -1310.0131001310015 -1 -1"
#!   ORDER="500000000000005"
#!   PARMS_EDITED="true"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="18295"
#! >
#!     <OUTPUT_FEAT NAME="SUCCEEDED"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <OUTPUT_FEAT NAME="FAILED"/>
#!     <FEAT_COLLAPSED COLLAPSED="1"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <XFORM_ATTR ATTR_NAME="_failure_message" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <OUTPUT_FEAT NAME="SUMMARY"/>
#!     <FEAT_COLLAPSED COLLAPSED="2"/>
#!     <XFORM_ATTR ATTR_NAME="_proc_count" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_ATTR ATTR_NAME="_processes{}" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_PARM PARM_NAME="BLOCKING" PARM_VALUE="No"/>
#!     <XFORM_PARM PARM_NAME="MAX_PROC" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="MAX_TO_BATCH" PARM_VALUE="1"/>
#!     <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="PARAMETER_TYPES" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_FILE" PARM_VALUE="$(FME_MF_DIR)americanwhitewater/index.fmw"/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_PARAMETERS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WS_PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="WorkspaceRunner_4"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#!   IDENTIFIER="16"
#!   TYPE="WorkspaceRunner"
#!   VERSION="3"
#!   POSITION="915.50915509155118 -1648.0164801648018"
#!   BOUNDING_RECT="915.50915509155118 -1648.0164801648018 -1 -1"
#!   ORDER="500000000000047"
#!   PARMS_EDITED="true"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="18295"
#! >
#!     <OUTPUT_FEAT NAME="SUCCEEDED"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <OUTPUT_FEAT NAME="FAILED"/>
#!     <FEAT_COLLAPSED COLLAPSED="1"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <XFORM_ATTR ATTR_NAME="_failure_message" IS_USER_CREATED="false" FEAT_INDEX="1" />
#!     <OUTPUT_FEAT NAME="SUMMARY"/>
#!     <FEAT_COLLAPSED COLLAPSED="2"/>
#!     <XFORM_ATTR ATTR_NAME="_proc_count" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_ATTR ATTR_NAME="_processes{}" IS_USER_CREATED="false" FEAT_INDEX="2" />
#!     <XFORM_PARM PARM_NAME="BLOCKING" PARM_VALUE="No"/>
#!     <XFORM_PARM PARM_NAME="MAX_PROC" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="MAX_TO_BATCH" PARM_VALUE="1"/>
#!     <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="PARAMETER_TYPES" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_FILE" PARM_VALUE="$(FME_MF_DIR)canada/index.fmw"/>
#!     <XFORM_PARM PARM_NAME="WORKSPACE_PARAMETERS" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="WS_PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="WorkspaceRunner_5"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#!   IDENTIFIER="18"
#!   TYPE="Logger"
#!   VERSION="4"
#!   POSITION="1825.5242152421522 -557.50253002530064"
#!   BOUNDING_RECT="1825.5242152421522 -557.50253002530064 -1 -1"
#!   ORDER="500000000000048"
#!   PARMS_EDITED="true"
#!   ENABLED="true"
#!   LAST_PARM_EDIT="18295"
#! >
#!     <OUTPUT_FEAT NAME="LOGGED"/>
#!     <FEAT_COLLAPSED COLLAPSED="0"/>
#!     <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <XFORM_ATTR ATTR_NAME="_failure_message" IS_USER_CREATED="false" FEAT_INDEX="0" />
#!     <XFORM_PARM PARM_NAME="FEATURE_TYPE" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="LOG_FEATURE" PARM_VALUE="LOG_ONLY"/>
#!     <XFORM_PARM PARM_NAME="MAXCOORDS" PARM_VALUE="20"/>
#!     <XFORM_PARM PARM_NAME="MAXFEATS" PARM_VALUE="20"/>
#!     <XFORM_PARM PARM_NAME="MESSAGE" PARM_VALUE="Feature is:"/>
#!     <XFORM_PARM PARM_NAME="MSG_GRP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="SEVERITY" PARM_VALUE="INFO"/>
#!     <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#!     <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="Logger"/>
#! </TRANSFORMER>
#! </TRANSFORMERS>
#! <FEAT_LINKS>
#! <FEAT_LINK
#!   IDENTIFIER="4"
#!   SOURCE_NODE="2"
#!   TARGET_NODE="3"
#!   SOURCE_PORT_DESC="fo 0 CREATED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="6"
#!   SOURCE_NODE="2"
#!   TARGET_NODE="5"
#!   SOURCE_PORT_DESC="fo 0 CREATED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="1"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="8"
#!   SOURCE_NODE="2"
#!   TARGET_NODE="7"
#!   SOURCE_PORT_DESC="fo 0 CREATED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="2"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="10"
#!   SOURCE_NODE="2"
#!   TARGET_NODE="9"
#!   SOURCE_PORT_DESC="fo 0 CREATED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="3"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="17"
#!   SOURCE_NODE="2"
#!   TARGET_NODE="16"
#!   SOURCE_PORT_DESC="fo 0 CREATED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="4"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="13"
#!   SOURCE_NODE="3"
#!   TARGET_NODE="18"
#!   SOURCE_PORT_DESC="fo 0 SUCCEEDED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="15"
#!   SOURCE_NODE="5"
#!   TARGET_NODE="18"
#!   SOURCE_PORT_DESC="fo 0 SUCCEEDED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="20"
#!   SOURCE_NODE="7"
#!   TARGET_NODE="18"
#!   SOURCE_PORT_DESC="fo 0 SUCCEEDED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="22"
#!   SOURCE_NODE="9"
#!   TARGET_NODE="18"
#!   SOURCE_PORT_DESC="fo 0 SUCCEEDED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="24"
#!   SOURCE_NODE="16"
#!   TARGET_NODE="18"
#!   SOURCE_PORT_DESC="fo 0 SUCCEEDED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="14"
#!   SOURCE_NODE="3"
#!   TARGET_NODE="18"
#!   SOURCE_PORT_DESC="fo 1 FAILED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="19"
#!   SOURCE_NODE="5"
#!   TARGET_NODE="18"
#!   SOURCE_PORT_DESC="fo 1 FAILED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="21"
#!   SOURCE_NODE="7"
#!   TARGET_NODE="18"
#!   SOURCE_PORT_DESC="fo 1 FAILED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="23"
#!   SOURCE_NODE="9"
#!   TARGET_NODE="18"
#!   SOURCE_PORT_DESC="fo 1 FAILED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#!   IDENTIFIER="25"
#!   SOURCE_NODE="16"
#!   TARGET_NODE="18"
#!   SOURCE_PORT_DESC="fo 1 FAILED"
#!   TARGET_PORT_DESC="fi 0 "
#!   ENABLED="true"
#!   EXECUTION_IDX="0"
#!   HIDDEN="false"
#!   EXTRA_POINTS=""
#! />
#! </FEAT_LINKS>
#! <BREAKPOINTS>
#! </BREAKPOINTS>
#! <ATTR_LINKS>
#! </ATTR_LINKS>
#! <SUBDOCUMENTS>
#! </SUBDOCUMENTS>
#! <LOOKUP_TABLES>
#! </LOOKUP_TABLES>
#! </WORKSPACE>
FME_PYTHON_VERSION 27
#! START_HEADER
#! START_WB_HEADER
READER_TYPE MULTI_READER

WRITER_TYPE NULL
WRITER_KEYWORD NULL_DEST
NULL_DEST_DATASET null
#! END_WB_HEADER

#! START_WB_HEADER
#! END_WB_HEADER

#! END_HEADER

LOG_FILENAME "$(FME_MF_DIR)index.log"
LOG_APPEND NO
LOG_MAX_FEATURES 200
LOG_MAX_RECORDED_FEATURES 200
FME_REPROJECTION_ENGINE FME
FME_IMPLICIT_CSMAP_REPROJECTION_MODE Auto
FME_GEOMETRY_HANDLING Enhanced
FME_STROKE_MAX_DEVIATION 0
LOG_FILTER_MASK -1
# -------------------------------------------------------------------------

MULTI_READER_CONTINUE_ON_READER_FAILURE No

# -------------------------------------------------------------------------

MACRO WORKSPACE_NAME index
MACRO FME_VIEWER_APP fmedatainspector
DEFAULT_MACRO WB_CURRENT_CONTEXT
# -------------------------------------------------------------------------

Tcl2 proc Creator_CoordSysRemover {} {   global FME_CoordSys;   set FME_CoordSys {}; }
MACRO Creator_XML     NOT_ACTIVATED
MACRO Creator_CLASSIC NOT_ACTIVATED
MACRO Creator_2D3D    2D_GEOMETRY
MACRO Creator_COORDS  <Unused>
INCLUDE [ if { {Geometry Object} == {Geometry Object} } {            puts {MACRO Creator_XML *} } ]
INCLUDE [ if { {Geometry Object} == {2D Coordinate List} } {            puts {MACRO Creator_2D3D 2D_GEOMETRY};            puts {MACRO Creator_CLASSIC *} } ]
INCLUDE [ if { {Geometry Object} == {3D Coordinate List} } {            puts {MACRO Creator_2D3D 3D_GEOMETRY};            puts {MACRO Creator_CLASSIC *} } ]
INCLUDE [ if { {Geometry Object} == {2D Min/Max Box} } {            set comment {                We need to turn the COORDS which are                    minX minY maxX maxY                into a full polygon list of coordinates            };            set splitCoords [split [string trim {<Unused>}]];            if { [llength $splitCoords] > 4} {               set trimmedCoords {};               foreach item $splitCoords { if { $item != {} } {lappend trimmedCoords $item} };               set splitCoords $trimmedCoords;            };            if { [llength $splitCoords] != 4 } {                error {Creator: Coordinate list is expected to be a space delimited list of four numbers as 'minx miny maxx maxy' - `<Unused>' is invalid};            };            set minX [lindex $splitCoords 0];            set minY [lindex $splitCoords 1];            set maxX [lindex $splitCoords 2];            set maxY [lindex $splitCoords 3];            puts "MACRO Creator_COORDS $minX $minY $minX $maxY $maxX $maxY $maxX $minY $minX $minY";            puts {MACRO Creator_2D3D 2D_GEOMETRY};            puts {MACRO Creator_CLASSIC *} } ]
FACTORY_DEF $(Creator_XML) CreationFactory    FACTORY_NAME Creator_XML_Creator    CREATE_AT_END no    OUTPUT FEATURE_TYPE _____CREATED______        @Geometry(FROM_ENCODED_STRING,<lt>?xml<space>version=<quote>1.0<quote><space>encoding=<quote>US_ASCII<quote><space>standalone=<quote>no<quote><space>?<gt><lt>geometry<space>dimension=<quote>2<quote><gt><lt>null<solidus><gt><lt><solidus>geometry<gt>)
FACTORY_DEF $(Creator_CLASSIC) CreationFactory    FACTORY_NAME Creator_CLASSIC_Creator    $(Creator_2D3D) $(Creator_COORDS)    CREATE_AT_END no    OUTPUT FEATURE_TYPE _____CREATED______
FACTORY_DEF * TeeFactory    FACTORY_NAME Creator_Cloner    INPUT FEATURE_TYPE _____CREATED______        @Tcl2(Creator_CoordSysRemover)        @CoordSys()    NUMBER_OF_COPIES 1    COPY_NUMBER_ATTRIBUTE "_creation_instance"    OUTPUT FEATURE_TYPE Creator_CREATED        fme_feature_type Creator

FACTORY_DEF * TeeFactory   FACTORY_NAME "Creator CREATED Splitter"   INPUT FEATURE_TYPE Creator_CREATED   OUTPUT FEATURE_TYPE Creator_CREATED_0_GJAgmIF9G6c=   OUTPUT FEATURE_TYPE Creator_CREATED_1_Exx7idfjvCA=   OUTPUT FEATURE_TYPE Creator_CREATED_2_goANeUpBIDA=   OUTPUT FEATURE_TYPE Creator_CREATED_3_T6a7qEGs3cw=   OUTPUT FEATURE_TYPE Creator_CREATED_4_kL0twIhQOd0=
FACTORY_DEF * BranchingFactory   FACTORY_NAME "Creator_CREATED_0_GJAgmIF9G6c= Brancher -1 4"   INPUT FEATURE_TYPE Creator_CREATED_0_GJAgmIF9G6c=   TARGET_FACTORY "$(WB_CURRENT_CONTEXT)_CREATOR_BRANCH_TARGET"   MAXIMUM_COUNT None   OUTPUT PASSED FEATURE_TYPE *
FACTORY_DEF * BranchingFactory   FACTORY_NAME "Creator_CREATED_1_Exx7idfjvCA= Brancher -1 6"   INPUT FEATURE_TYPE Creator_CREATED_1_Exx7idfjvCA=   TARGET_FACTORY "$(WB_CURRENT_CONTEXT)_CREATOR_BRANCH_TARGET"   MAXIMUM_COUNT None   OUTPUT PASSED FEATURE_TYPE *
FACTORY_DEF * BranchingFactory   FACTORY_NAME "Creator_CREATED_2_goANeUpBIDA= Brancher -1 8"   INPUT FEATURE_TYPE Creator_CREATED_2_goANeUpBIDA=   TARGET_FACTORY "$(WB_CURRENT_CONTEXT)_CREATOR_BRANCH_TARGET"   MAXIMUM_COUNT None   OUTPUT PASSED FEATURE_TYPE *
FACTORY_DEF * BranchingFactory   FACTORY_NAME "Creator_CREATED_3_T6a7qEGs3cw= Brancher -1 10"   INPUT FEATURE_TYPE Creator_CREATED_3_T6a7qEGs3cw=   TARGET_FACTORY "$(WB_CURRENT_CONTEXT)_CREATOR_BRANCH_TARGET"   MAXIMUM_COUNT None   OUTPUT PASSED FEATURE_TYPE *
FACTORY_DEF * BranchingFactory   FACTORY_NAME "Creator_CREATED_4_kL0twIhQOd0= Brancher -1 17"   INPUT FEATURE_TYPE Creator_CREATED_4_kL0twIhQOd0=   TARGET_FACTORY "$(WB_CURRENT_CONTEXT)_CREATOR_BRANCH_TARGET"   MAXIMUM_COUNT None   OUTPUT PASSED FEATURE_TYPE *
# -------------------------------------------------------------------------
FACTORY_DEF * TeeFactory   FACTORY_NAME "$(WB_CURRENT_CONTEXT)_CREATOR_BRANCH_TARGET"   INPUT FEATURE_TYPE *  OUTPUT FEATURE_TYPE *
# -------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Determine the "NULL" device so we can ensure we don't get stray output
# messing up our stdout if we are running workspaces in the background
# See http://wiki.tcl.tk/1649 for a description of the tcl_platform
# variable, the "platform" part seems to have valid values windows, unix, and
# macintosh (the latter of which is actually pre-OS X)

Tcl2 if { $tcl_platform(platform) == {windows} } {         set ::null_device {NUL:};         set ::__WR_ENV_HELPER__ {};      } else {         set ::null_device {/dev/null};         set ::__WR_ENV_HELPER__ {/usr/bin/env FME_SUBPROCESS_RUN_DETACHED=1};      };
# ------------------------------------------------------------------------------
# Escape existing double quotes and then wrap in double quotes

Tcl2 proc quotifyForParameterFileV3 { sourceString } {   if {[string length $sourceString] == 0} {      return \"\";   };   set doQuote 0;   if {[string first { } $sourceString] != -1} {      set doQuote 1;   };   set sourceString [string map {{\"} {\\"}} $sourceString];   if {$doQuote == 1} {      set sourceString \\"$sourceString\\";   };   return $sourceString; };
# ------------------------------------------------------------------------------
# Main runner procedure, takes in a parameter list as string which is delimited
# by \x07 (BELL) character and the workspace to run

Tcl2 proc WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_runner { parmListString workspaceFile } {    global WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_commands;    global WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_batch_count;    incr WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_batch_count 0;    if { [info exists WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_commands] == 0 } {       set WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_commands {};    };    set workspaceFileUnix [regsub -all {\\} $workspaceFile {/}];    set parmListString [string range $parmListString 1 end-1];    set comment    {        Build up the command line in a list, which we'll write it out to a        parameter file.    };    set commandArguments {};    set commandArgumentsToLog {};    set workspaceToRun [quotifyForParameterFileV3 $workspaceFileUnix];    lappend commandArguments $workspaceToRun;    lappend commandArgumentsToLog $workspaceToRun;    set parameterList [split $parmListString \x07];    set parmTypes [split {} {,}];    foreach {parmName parmValue} $parameterList {parmType} $parmTypes {      set parmValue [quotifyForParameterFileV3 $parmValue];      lappend commandArguments --$parmName;      lappend commandArgumentsToLog --$parmName;      lappend commandArguments $parmValue;      if { [string first {PASSWORD} $parmType] != -1 } {           lappend commandArgumentsToLog {*********};      } else {           lappend commandArgumentsToLog $parmValue;      };    };    lappend WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_commands [join $commandArguments " "];    incr WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_batch_count;    if { {No} == {No} && {1} > 1  && $WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_batch_count <= {1} } {       FME_LogMessage fme_inform 933450 WorkspaceRunner_5 $commandArgumentsToLog;    } else {       FME_LogMessage fme_inform 933451 WorkspaceRunner_5 $commandArgumentsToLog;    };    if { {No} != {No} || $WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_batch_count == {1} } {       set WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_batch_count 0;       set commandFile [WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_writeCommandFile $WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_commands {};       lappend cmdArgs {*}$::__WR_ENV_HELPER__ {$(FME_HOME_UNIX)/fme} COMMAND_FILE $commandFile;    } else {       return SUCCESS;    };    return [WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_runCommand $cmdArgs $workspaceFileUnix]; }
# ------------------------------------------------------------------------------
# When batching commands, any overflow commands will be run at the end. Say you
# batch by 2 and there are 5 incoming features. Then we will have 2 batches with
# 2 commands each and 1 overflow batch with 1 command

Tcl2 proc WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_flushPending { } {    global WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_commands;    if { [info exists WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_commands] == 1 && [llength $WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_commands] > 0 } {       set workspaceToRun [lindex $WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_commands 0];       set commandFile [WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_writeCommandFile $WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_commands {};       lappend commandArguments {*}$::__WR_ENV_HELPER__ {$(FME_HOME_UNIX)/fme} COMMAND_FILE $commandFile;       return [WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_runCommand $commandArguments $workspaceToRun];    };    return SUCCESS; }
# ------------------------------------------------------------------------------
# Build and run the command

Tcl2 proc WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_runCommand {commandArguments workspaceFileUnix} {    if { {No} == {No} } {        lappend commandArguments \">$::null_device\";        lappend commandArguments \"<$::null_device\";    };    set comment    {        The below 2>@1 forces any standard error output to go into the msg variable        or to NULL if we're running in the background.    };    lappend commandArguments {2>@1};    if { {No} == {No} } {        lappend commandArguments {&};    };    if { {No} == {No} } {       after 1000;       while { [FME_CanSpawnFme ] == {0} } {             after 2000;       };    };    if { No == {No} && {1} > 1 } {       FME_LogMessage fme_inform 933452 WorkspaceRunner_5 $commandArguments;    } else {       FME_LogMessage fme_inform 933453 WorkspaceRunner_5 $commandArguments;    };    if {[catch {eval [concat exec $commandArguments] } msg ]} {       set msg [regsub {\015*\012child[^\012]*$} $msg {}];       FME_LogMessage fme_warn 933454 WorkspaceRunner_5 $workspaceFileUnix "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return FAILURE;    } else {       global WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_process_count;       incr WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_process_count;       if { {No} == {No} } {           FME_LogMessage fme_inform 933455 WorkspaceRunner_5 $workspaceFileUnix;           global WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_all_processes;           lappend WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_all_processes $msg;       } else {           FME_LogMessage fme_inform 933456 WorkspaceRunner_5 $workspaceFileUnix;       };       return SUCCESS;    }; }
# ------------------------------------------------------------------------------
# Create and write commands to command file

Tcl2 proc WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_writeCommandFile { commands } {    set commandFile [FME_TempFilename wsr_cm_];    if { [catch { set cmdFileId [open $commandFile "w"] } msg ] } {       FME_LogMessage fme_warn 933457 WorkspaceRunner_5 $commandFile "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return {};    };    fconfigure $cmdFileId -encoding utf-8;    puts $cmdFileId {#! encoding=\"utf-8\"};    puts $cmdFileId DELETE_FILE_AFTER_LOAD;    foreach {command} $commands {       puts $cmdFileId $command;    };    close $cmdFileId;    return $commandFile; }
# ------------------------------------------------------------------------------
# Use \x07 (BELL) character as the delimiter when writing WORKSPACE_PARAMETERS
# to mapping file
FACTORY_DEF * TestFactory    FACTORY_NAME WorkspaceRunner_5_ExecutorAndRouter    INPUT  FEATURE_TYPE Creator_CREATED_4_kL0twIhQOd0=    TEST @Tcl2("WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_runner {()} {@EvaluateExpression(FDIV,STRING,$(FME_MF_DIR$encode)canada<solidus>index.fmw,WorkspaceRunner_5)}") == SUCCESS    OUTPUT PASSED FEATURE_TYPE WorkspaceRunner_5_SUCCEEDED    OUTPUT FAILED FEATURE_TYPE WorkspaceRunner_5_FAILED
Tcl2 proc WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_summarizer { } {     global WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_process_count;     set comment { incr 0 creates the variable if it wasn't present };     incr WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_process_count 0;     FME_SetAttribute _proc_count [set WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_process_count];     global WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_all_processes;     if {[info exists WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_all_processes]} {         set index 0;         foreach pid [set WorkspaceRunner_5_15a0bcef_3416_48ee_b037_c4eedb3337380_all_processes] {             FME_SetAttribute \"_processes{$index}\" $pid;             incr index;         }     } }
FACTORY_DEF * CreationFactory    FACTORY_NAME WorkspaceRunner_5_SummaryMaker    CREATE_AT_END yes

# -------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Determine the "NULL" device so we can ensure we don't get stray output
# messing up our stdout if we are running workspaces in the background
# See http://wiki.tcl.tk/1649 for a description of the tcl_platform
# variable, the "platform" part seems to have valid values windows, unix, and
# macintosh (the latter of which is actually pre-OS X)

Tcl2 if { $tcl_platform(platform) == {windows} } {         set ::null_device {NUL:};         set ::__WR_ENV_HELPER__ {};      } else {         set ::null_device {/dev/null};         set ::__WR_ENV_HELPER__ {/usr/bin/env FME_SUBPROCESS_RUN_DETACHED=1};      };
# ------------------------------------------------------------------------------
# Escape existing double quotes and then wrap in double quotes

Tcl2 proc quotifyForParameterFileV3 { sourceString } {   if {[string length $sourceString] == 0} {      return \"\";   };   set doQuote 0;   if {[string first { } $sourceString] != -1} {      set doQuote 1;   };   set sourceString [string map {{\"} {\\"}} $sourceString];   if {$doQuote == 1} {      set sourceString \\"$sourceString\\";   };   return $sourceString; };
# ------------------------------------------------------------------------------
# Main runner procedure, takes in a parameter list as string which is delimited
# by \x07 (BELL) character and the workspace to run

Tcl2 proc WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_runner { parmListString workspaceFile } {    global WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_commands;    global WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_batch_count;    incr WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_batch_count 0;    if { [info exists WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_commands] == 0 } {       set WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_commands {};    };    set workspaceFileUnix [regsub -all {\\} $workspaceFile {/}];    set parmListString [string range $parmListString 1 end-1];    set comment    {        Build up the command line in a list, which we'll write it out to a        parameter file.    };    set commandArguments {};    set commandArgumentsToLog {};    set workspaceToRun [quotifyForParameterFileV3 $workspaceFileUnix];    lappend commandArguments $workspaceToRun;    lappend commandArgumentsToLog $workspaceToRun;    set parameterList [split $parmListString \x07];    set parmTypes [split {} {,}];    foreach {parmName parmValue} $parameterList {parmType} $parmTypes {      set parmValue [quotifyForParameterFileV3 $parmValue];      lappend commandArguments --$parmName;      lappend commandArgumentsToLog --$parmName;      lappend commandArguments $parmValue;      if { [string first {PASSWORD} $parmType] != -1 } {           lappend commandArgumentsToLog {*********};      } else {           lappend commandArgumentsToLog $parmValue;      };    };    lappend WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_commands [join $commandArguments " "];    incr WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_batch_count;    if { {No} == {No} && {1} > 1  && $WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_batch_count <= {1} } {       FME_LogMessage fme_inform 933450 WorkspaceRunner_4 $commandArgumentsToLog;    } else {       FME_LogMessage fme_inform 933451 WorkspaceRunner_4 $commandArgumentsToLog;    };    if { {No} != {No} || $WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_batch_count == {1} } {       set WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_batch_count 0;       set commandFile [WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_writeCommandFile $WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_commands {};       lappend cmdArgs {*}$::__WR_ENV_HELPER__ {$(FME_HOME_UNIX)/fme} COMMAND_FILE $commandFile;    } else {       return SUCCESS;    };    return [WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_runCommand $cmdArgs $workspaceFileUnix]; }
# ------------------------------------------------------------------------------
# When batching commands, any overflow commands will be run at the end. Say you
# batch by 2 and there are 5 incoming features. Then we will have 2 batches with
# 2 commands each and 1 overflow batch with 1 command

Tcl2 proc WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_flushPending { } {    global WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_commands;    if { [info exists WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_commands] == 1 && [llength $WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_commands] > 0 } {       set workspaceToRun [lindex $WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_commands 0];       set commandFile [WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_writeCommandFile $WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_commands {};       lappend commandArguments {*}$::__WR_ENV_HELPER__ {$(FME_HOME_UNIX)/fme} COMMAND_FILE $commandFile;       return [WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_runCommand $commandArguments $workspaceToRun];    };    return SUCCESS; }
# ------------------------------------------------------------------------------
# Build and run the command

Tcl2 proc WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_runCommand {commandArguments workspaceFileUnix} {    if { {No} == {No} } {        lappend commandArguments \">$::null_device\";        lappend commandArguments \"<$::null_device\";    };    set comment    {        The below 2>@1 forces any standard error output to go into the msg variable        or to NULL if we're running in the background.    };    lappend commandArguments {2>@1};    if { {No} == {No} } {        lappend commandArguments {&};    };    if { {No} == {No} } {       after 1000;       while { [FME_CanSpawnFme ] == {0} } {             after 2000;       };    };    if { No == {No} && {1} > 1 } {       FME_LogMessage fme_inform 933452 WorkspaceRunner_4 $commandArguments;    } else {       FME_LogMessage fme_inform 933453 WorkspaceRunner_4 $commandArguments;    };    if {[catch {eval [concat exec $commandArguments] } msg ]} {       set msg [regsub {\015*\012child[^\012]*$} $msg {}];       FME_LogMessage fme_warn 933454 WorkspaceRunner_4 $workspaceFileUnix "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return FAILURE;    } else {       global WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_process_count;       incr WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_process_count;       if { {No} == {No} } {           FME_LogMessage fme_inform 933455 WorkspaceRunner_4 $workspaceFileUnix;           global WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_all_processes;           lappend WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_all_processes $msg;       } else {           FME_LogMessage fme_inform 933456 WorkspaceRunner_4 $workspaceFileUnix;       };       return SUCCESS;    }; }
# ------------------------------------------------------------------------------
# Create and write commands to command file

Tcl2 proc WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_writeCommandFile { commands } {    set commandFile [FME_TempFilename wsr_cm_];    if { [catch { set cmdFileId [open $commandFile "w"] } msg ] } {       FME_LogMessage fme_warn 933457 WorkspaceRunner_4 $commandFile "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return {};    };    fconfigure $cmdFileId -encoding utf-8;    puts $cmdFileId {#! encoding=\"utf-8\"};    puts $cmdFileId DELETE_FILE_AFTER_LOAD;    foreach {command} $commands {       puts $cmdFileId $command;    };    close $cmdFileId;    return $commandFile; }
# ------------------------------------------------------------------------------
# Use \x07 (BELL) character as the delimiter when writing WORKSPACE_PARAMETERS
# to mapping file
FACTORY_DEF * TestFactory    FACTORY_NAME WorkspaceRunner_4_ExecutorAndRouter    INPUT  FEATURE_TYPE Creator_CREATED_3_T6a7qEGs3cw=    TEST @Tcl2("WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_runner {()} {@EvaluateExpression(FDIV,STRING,$(FME_MF_DIR$encode)americanwhitewater<solidus>index.fmw,WorkspaceRunner_4)}") == SUCCESS    OUTPUT PASSED FEATURE_TYPE WorkspaceRunner_4_SUCCEEDED    OUTPUT FAILED FEATURE_TYPE WorkspaceRunner_4_FAILED
Tcl2 proc WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_summarizer { } {     global WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_process_count;     set comment { incr 0 creates the variable if it wasn't present };     incr WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_process_count 0;     FME_SetAttribute _proc_count [set WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_process_count];     global WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_all_processes;     if {[info exists WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_all_processes]} {         set index 0;         foreach pid [set WorkspaceRunner_4_156042d5_c3b4_4e6c_bf4e_5e7345b21f220_all_processes] {             FME_SetAttribute \"_processes{$index}\" $pid;             incr index;         }     } }
FACTORY_DEF * CreationFactory    FACTORY_NAME WorkspaceRunner_4_SummaryMaker    CREATE_AT_END yes

# -------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Determine the "NULL" device so we can ensure we don't get stray output
# messing up our stdout if we are running workspaces in the background
# See http://wiki.tcl.tk/1649 for a description of the tcl_platform
# variable, the "platform" part seems to have valid values windows, unix, and
# macintosh (the latter of which is actually pre-OS X)

Tcl2 if { $tcl_platform(platform) == {windows} } {         set ::null_device {NUL:};         set ::__WR_ENV_HELPER__ {};      } else {         set ::null_device {/dev/null};         set ::__WR_ENV_HELPER__ {/usr/bin/env FME_SUBPROCESS_RUN_DETACHED=1};      };
# ------------------------------------------------------------------------------
# Escape existing double quotes and then wrap in double quotes

Tcl2 proc quotifyForParameterFileV3 { sourceString } {   if {[string length $sourceString] == 0} {      return \"\";   };   set doQuote 0;   if {[string first { } $sourceString] != -1} {      set doQuote 1;   };   set sourceString [string map {{\"} {\\"}} $sourceString];   if {$doQuote == 1} {      set sourceString \\"$sourceString\\";   };   return $sourceString; };
# ------------------------------------------------------------------------------
# Main runner procedure, takes in a parameter list as string which is delimited
# by \x07 (BELL) character and the workspace to run

Tcl2 proc WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_runner { parmListString workspaceFile } {    global WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_commands;    global WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_batch_count;    incr WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_batch_count 0;    if { [info exists WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_commands] == 0 } {       set WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_commands {};    };    set workspaceFileUnix [regsub -all {\\} $workspaceFile {/}];    set parmListString [string range $parmListString 1 end-1];    set comment    {        Build up the command line in a list, which we'll write it out to a        parameter file.    };    set commandArguments {};    set commandArgumentsToLog {};    set workspaceToRun [quotifyForParameterFileV3 $workspaceFileUnix];    lappend commandArguments $workspaceToRun;    lappend commandArgumentsToLog $workspaceToRun;    set parameterList [split $parmListString \x07];    set parmTypes [split {} {,}];    foreach {parmName parmValue} $parameterList {parmType} $parmTypes {      set parmValue [quotifyForParameterFileV3 $parmValue];      lappend commandArguments --$parmName;      lappend commandArgumentsToLog --$parmName;      lappend commandArguments $parmValue;      if { [string first {PASSWORD} $parmType] != -1 } {           lappend commandArgumentsToLog {*********};      } else {           lappend commandArgumentsToLog $parmValue;      };    };    lappend WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_commands [join $commandArguments " "];    incr WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_batch_count;    if { {No} == {No} && {1} > 1  && $WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_batch_count <= {1} } {       FME_LogMessage fme_inform 933450 WorkspaceRunner_3 $commandArgumentsToLog;    } else {       FME_LogMessage fme_inform 933451 WorkspaceRunner_3 $commandArgumentsToLog;    };    if { {No} != {No} || $WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_batch_count == {1} } {       set WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_batch_count 0;       set commandFile [WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_writeCommandFile $WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_commands {};       lappend cmdArgs {*}$::__WR_ENV_HELPER__ {$(FME_HOME_UNIX)/fme} COMMAND_FILE $commandFile;    } else {       return SUCCESS;    };    return [WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_runCommand $cmdArgs $workspaceFileUnix]; }
# ------------------------------------------------------------------------------
# When batching commands, any overflow commands will be run at the end. Say you
# batch by 2 and there are 5 incoming features. Then we will have 2 batches with
# 2 commands each and 1 overflow batch with 1 command

Tcl2 proc WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_flushPending { } {    global WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_commands;    if { [info exists WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_commands] == 1 && [llength $WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_commands] > 0 } {       set workspaceToRun [lindex $WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_commands 0];       set commandFile [WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_writeCommandFile $WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_commands {};       lappend commandArguments {*}$::__WR_ENV_HELPER__ {$(FME_HOME_UNIX)/fme} COMMAND_FILE $commandFile;       return [WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_runCommand $commandArguments $workspaceToRun];    };    return SUCCESS; }
# ------------------------------------------------------------------------------
# Build and run the command

Tcl2 proc WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_runCommand {commandArguments workspaceFileUnix} {    if { {No} == {No} } {        lappend commandArguments \">$::null_device\";        lappend commandArguments \"<$::null_device\";    };    set comment    {        The below 2>@1 forces any standard error output to go into the msg variable        or to NULL if we're running in the background.    };    lappend commandArguments {2>@1};    if { {No} == {No} } {        lappend commandArguments {&};    };    if { {No} == {No} } {       after 1000;       while { [FME_CanSpawnFme ] == {0} } {             after 2000;       };    };    if { No == {No} && {1} > 1 } {       FME_LogMessage fme_inform 933452 WorkspaceRunner_3 $commandArguments;    } else {       FME_LogMessage fme_inform 933453 WorkspaceRunner_3 $commandArguments;    };    if {[catch {eval [concat exec $commandArguments] } msg ]} {       set msg [regsub {\015*\012child[^\012]*$} $msg {}];       FME_LogMessage fme_warn 933454 WorkspaceRunner_3 $workspaceFileUnix "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return FAILURE;    } else {       global WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_process_count;       incr WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_process_count;       if { {No} == {No} } {           FME_LogMessage fme_inform 933455 WorkspaceRunner_3 $workspaceFileUnix;           global WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_all_processes;           lappend WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_all_processes $msg;       } else {           FME_LogMessage fme_inform 933456 WorkspaceRunner_3 $workspaceFileUnix;       };       return SUCCESS;    }; }
# ------------------------------------------------------------------------------
# Create and write commands to command file

Tcl2 proc WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_writeCommandFile { commands } {    set commandFile [FME_TempFilename wsr_cm_];    if { [catch { set cmdFileId [open $commandFile "w"] } msg ] } {       FME_LogMessage fme_warn 933457 WorkspaceRunner_3 $commandFile "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return {};    };    fconfigure $cmdFileId -encoding utf-8;    puts $cmdFileId {#! encoding=\"utf-8\"};    puts $cmdFileId DELETE_FILE_AFTER_LOAD;    foreach {command} $commands {       puts $cmdFileId $command;    };    close $cmdFileId;    return $commandFile; }
# ------------------------------------------------------------------------------
# Use \x07 (BELL) character as the delimiter when writing WORKSPACE_PARAMETERS
# to mapping file
FACTORY_DEF * TestFactory    FACTORY_NAME WorkspaceRunner_3_ExecutorAndRouter    INPUT  FEATURE_TYPE Creator_CREATED_2_goANeUpBIDA=    TEST @Tcl2("WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_runner {()} {@EvaluateExpression(FDIV,STRING,$(FME_MF_DIR$encode)coloradoDWR<solidus>index.fmw,WorkspaceRunner_3)}") == SUCCESS    OUTPUT PASSED FEATURE_TYPE WorkspaceRunner_3_SUCCEEDED    OUTPUT FAILED FEATURE_TYPE WorkspaceRunner_3_FAILED
Tcl2 proc WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_summarizer { } {     global WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_process_count;     set comment { incr 0 creates the variable if it wasn't present };     incr WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_process_count 0;     FME_SetAttribute _proc_count [set WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_process_count];     global WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_all_processes;     if {[info exists WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_all_processes]} {         set index 0;         foreach pid [set WorkspaceRunner_3_5917ec41_87c1_4a00_b0a2_b3a52faa038b0_all_processes] {             FME_SetAttribute \"_processes{$index}\" $pid;             incr index;         }     } }
FACTORY_DEF * CreationFactory    FACTORY_NAME WorkspaceRunner_3_SummaryMaker    CREATE_AT_END yes

# -------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Determine the "NULL" device so we can ensure we don't get stray output
# messing up our stdout if we are running workspaces in the background
# See http://wiki.tcl.tk/1649 for a description of the tcl_platform
# variable, the "platform" part seems to have valid values windows, unix, and
# macintosh (the latter of which is actually pre-OS X)

Tcl2 if { $tcl_platform(platform) == {windows} } {         set ::null_device {NUL:};         set ::__WR_ENV_HELPER__ {};      } else {         set ::null_device {/dev/null};         set ::__WR_ENV_HELPER__ {/usr/bin/env FME_SUBPROCESS_RUN_DETACHED=1};      };
# ------------------------------------------------------------------------------
# Escape existing double quotes and then wrap in double quotes

Tcl2 proc quotifyForParameterFileV3 { sourceString } {   if {[string length $sourceString] == 0} {      return \"\";   };   set doQuote 0;   if {[string first { } $sourceString] != -1} {      set doQuote 1;   };   set sourceString [string map {{\"} {\\"}} $sourceString];   if {$doQuote == 1} {      set sourceString \\"$sourceString\\";   };   return $sourceString; };
# ------------------------------------------------------------------------------
# Main runner procedure, takes in a parameter list as string which is delimited
# by \x07 (BELL) character and the workspace to run

Tcl2 proc WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_runner { parmListString workspaceFile } {    global WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_commands;    global WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_batch_count;    incr WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_batch_count 0;    if { [info exists WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_commands] == 0 } {       set WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_commands {};    };    set workspaceFileUnix [regsub -all {\\} $workspaceFile {/}];    set parmListString [string range $parmListString 1 end-1];    set comment    {        Build up the command line in a list, which we'll write it out to a        parameter file.    };    set commandArguments {};    set commandArgumentsToLog {};    set workspaceToRun [quotifyForParameterFileV3 $workspaceFileUnix];    lappend commandArguments $workspaceToRun;    lappend commandArgumentsToLog $workspaceToRun;    set parameterList [split $parmListString \x07];    set parmTypes [split {} {,}];    foreach {parmName parmValue} $parameterList {parmType} $parmTypes {      set parmValue [quotifyForParameterFileV3 $parmValue];      lappend commandArguments --$parmName;      lappend commandArgumentsToLog --$parmName;      lappend commandArguments $parmValue;      if { [string first {PASSWORD} $parmType] != -1 } {           lappend commandArgumentsToLog {*********};      } else {           lappend commandArgumentsToLog $parmValue;      };    };    lappend WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_commands [join $commandArguments " "];    incr WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_batch_count;    if { {No} == {No} && {1} > 1  && $WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_batch_count <= {1} } {       FME_LogMessage fme_inform 933450 WorkspaceRunner_2 $commandArgumentsToLog;    } else {       FME_LogMessage fme_inform 933451 WorkspaceRunner_2 $commandArgumentsToLog;    };    if { {No} != {No} || $WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_batch_count == {1} } {       set WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_batch_count 0;       set commandFile [WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_writeCommandFile $WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_commands {};       lappend cmdArgs {*}$::__WR_ENV_HELPER__ {$(FME_HOME_UNIX)/fme} COMMAND_FILE $commandFile;    } else {       return SUCCESS;    };    return [WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_runCommand $cmdArgs $workspaceFileUnix]; }
# ------------------------------------------------------------------------------
# When batching commands, any overflow commands will be run at the end. Say you
# batch by 2 and there are 5 incoming features. Then we will have 2 batches with
# 2 commands each and 1 overflow batch with 1 command

Tcl2 proc WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_flushPending { } {    global WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_commands;    if { [info exists WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_commands] == 1 && [llength $WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_commands] > 0 } {       set workspaceToRun [lindex $WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_commands 0];       set commandFile [WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_writeCommandFile $WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_commands {};       lappend commandArguments {*}$::__WR_ENV_HELPER__ {$(FME_HOME_UNIX)/fme} COMMAND_FILE $commandFile;       return [WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_runCommand $commandArguments $workspaceToRun];    };    return SUCCESS; }
# ------------------------------------------------------------------------------
# Build and run the command

Tcl2 proc WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_runCommand {commandArguments workspaceFileUnix} {    if { {No} == {No} } {        lappend commandArguments \">$::null_device\";        lappend commandArguments \"<$::null_device\";    };    set comment    {        The below 2>@1 forces any standard error output to go into the msg variable        or to NULL if we're running in the background.    };    lappend commandArguments {2>@1};    if { {No} == {No} } {        lappend commandArguments {&};    };    if { {No} == {No} } {       after 1000;       while { [FME_CanSpawnFme ] == {0} } {             after 2000;       };    };    if { No == {No} && {1} > 1 } {       FME_LogMessage fme_inform 933452 WorkspaceRunner_2 $commandArguments;    } else {       FME_LogMessage fme_inform 933453 WorkspaceRunner_2 $commandArguments;    };    if {[catch {eval [concat exec $commandArguments] } msg ]} {       set msg [regsub {\015*\012child[^\012]*$} $msg {}];       FME_LogMessage fme_warn 933454 WorkspaceRunner_2 $workspaceFileUnix "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return FAILURE;    } else {       global WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_process_count;       incr WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_process_count;       if { {No} == {No} } {           FME_LogMessage fme_inform 933455 WorkspaceRunner_2 $workspaceFileUnix;           global WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_all_processes;           lappend WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_all_processes $msg;       } else {           FME_LogMessage fme_inform 933456 WorkspaceRunner_2 $workspaceFileUnix;       };       return SUCCESS;    }; }
# ------------------------------------------------------------------------------
# Create and write commands to command file

Tcl2 proc WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_writeCommandFile { commands } {    set commandFile [FME_TempFilename wsr_cm_];    if { [catch { set cmdFileId [open $commandFile "w"] } msg ] } {       FME_LogMessage fme_warn 933457 WorkspaceRunner_2 $commandFile "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return {};    };    fconfigure $cmdFileId -encoding utf-8;    puts $cmdFileId {#! encoding=\"utf-8\"};    puts $cmdFileId DELETE_FILE_AFTER_LOAD;    foreach {command} $commands {       puts $cmdFileId $command;    };    close $cmdFileId;    return $commandFile; }
# ------------------------------------------------------------------------------
# Use \x07 (BELL) character as the delimiter when writing WORKSPACE_PARAMETERS
# to mapping file
FACTORY_DEF * TestFactory    FACTORY_NAME WorkspaceRunner_2_ExecutorAndRouter    INPUT  FEATURE_TYPE Creator_CREATED_1_Exx7idfjvCA=    TEST @Tcl2("WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_runner {()} {@EvaluateExpression(FDIV,STRING,$(FME_MF_DIR$encode)noaa<solidus>index.fmw,WorkspaceRunner_2)}") == SUCCESS    OUTPUT PASSED FEATURE_TYPE WorkspaceRunner_2_SUCCEEDED    OUTPUT FAILED FEATURE_TYPE WorkspaceRunner_2_FAILED
Tcl2 proc WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_summarizer { } {     global WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_process_count;     set comment { incr 0 creates the variable if it wasn't present };     incr WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_process_count 0;     FME_SetAttribute _proc_count [set WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_process_count];     global WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_all_processes;     if {[info exists WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_all_processes]} {         set index 0;         foreach pid [set WorkspaceRunner_2_cc472e98_f524_4173_a945_7fd5b6e85d3f0_all_processes] {             FME_SetAttribute \"_processes{$index}\" $pid;             incr index;         }     } }
FACTORY_DEF * CreationFactory    FACTORY_NAME WorkspaceRunner_2_SummaryMaker    CREATE_AT_END yes

# -------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Determine the "NULL" device so we can ensure we don't get stray output
# messing up our stdout if we are running workspaces in the background
# See http://wiki.tcl.tk/1649 for a description of the tcl_platform
# variable, the "platform" part seems to have valid values windows, unix, and
# macintosh (the latter of which is actually pre-OS X)

Tcl2 if { $tcl_platform(platform) == {windows} } {         set ::null_device {NUL:};         set ::__WR_ENV_HELPER__ {};      } else {         set ::null_device {/dev/null};         set ::__WR_ENV_HELPER__ {/usr/bin/env FME_SUBPROCESS_RUN_DETACHED=1};      };
# ------------------------------------------------------------------------------
# Escape existing double quotes and then wrap in double quotes

Tcl2 proc quotifyForParameterFileV3 { sourceString } {   if {[string length $sourceString] == 0} {      return \"\";   };   set doQuote 0;   if {[string first { } $sourceString] != -1} {      set doQuote 1;   };   set sourceString [string map {{\"} {\\"}} $sourceString];   if {$doQuote == 1} {      set sourceString \\"$sourceString\\";   };   return $sourceString; };
# ------------------------------------------------------------------------------
# Main runner procedure, takes in a parameter list as string which is delimited
# by \x07 (BELL) character and the workspace to run

Tcl2 proc WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_runner { parmListString workspaceFile } {    global WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_commands;    global WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_batch_count;    incr WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_batch_count 0;    if { [info exists WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_commands] == 0 } {       set WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_commands {};    };    set workspaceFileUnix [regsub -all {\\} $workspaceFile {/}];    set parmListString [string range $parmListString 1 end-1];    set comment    {        Build up the command line in a list, which we'll write it out to a        parameter file.    };    set commandArguments {};    set commandArgumentsToLog {};    set workspaceToRun [quotifyForParameterFileV3 $workspaceFileUnix];    lappend commandArguments $workspaceToRun;    lappend commandArgumentsToLog $workspaceToRun;    set parameterList [split $parmListString \x07];    set parmTypes [split {} {,}];    foreach {parmName parmValue} $parameterList {parmType} $parmTypes {      set parmValue [quotifyForParameterFileV3 $parmValue];      lappend commandArguments --$parmName;      lappend commandArgumentsToLog --$parmName;      lappend commandArguments $parmValue;      if { [string first {PASSWORD} $parmType] != -1 } {           lappend commandArgumentsToLog {*********};      } else {           lappend commandArgumentsToLog $parmValue;      };    };    lappend WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_commands [join $commandArguments " "];    incr WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_batch_count;    if { {No} == {No} && {1} > 1  && $WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_batch_count <= {1} } {       FME_LogMessage fme_inform 933450 WorkspaceRunner $commandArgumentsToLog;    } else {       FME_LogMessage fme_inform 933451 WorkspaceRunner $commandArgumentsToLog;    };    if { {No} != {No} || $WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_batch_count == {1} } {       set WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_batch_count 0;       set commandFile [WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_writeCommandFile $WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_commands {};       lappend cmdArgs {*}$::__WR_ENV_HELPER__ {$(FME_HOME_UNIX)/fme} COMMAND_FILE $commandFile;    } else {       return SUCCESS;    };    return [WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_runCommand $cmdArgs $workspaceFileUnix]; }
# ------------------------------------------------------------------------------
# When batching commands, any overflow commands will be run at the end. Say you
# batch by 2 and there are 5 incoming features. Then we will have 2 batches with
# 2 commands each and 1 overflow batch with 1 command

Tcl2 proc WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_flushPending { } {    global WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_commands;    if { [info exists WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_commands] == 1 && [llength $WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_commands] > 0 } {       set workspaceToRun [lindex $WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_commands 0];       set commandFile [WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_writeCommandFile $WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_commands];       if { $commandFile == {} } {          return FAILURE;       };       set WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_commands {};       lappend commandArguments {*}$::__WR_ENV_HELPER__ {$(FME_HOME_UNIX)/fme} COMMAND_FILE $commandFile;       return [WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_runCommand $commandArguments $workspaceToRun];    };    return SUCCESS; }
# ------------------------------------------------------------------------------
# Build and run the command

Tcl2 proc WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_runCommand {commandArguments workspaceFileUnix} {    if { {No} == {No} } {        lappend commandArguments \">$::null_device\";        lappend commandArguments \"<$::null_device\";    };    set comment    {        The below 2>@1 forces any standard error output to go into the msg variable        or to NULL if we're running in the background.    };    lappend commandArguments {2>@1};    if { {No} == {No} } {        lappend commandArguments {&};    };    if { {No} == {No} } {       after 1000;       while { [FME_CanSpawnFme ] == {0} } {             after 2000;       };    };    if { No == {No} && {1} > 1 } {       FME_LogMessage fme_inform 933452 WorkspaceRunner $commandArguments;    } else {       FME_LogMessage fme_inform 933453 WorkspaceRunner $commandArguments;    };    if {[catch {eval [concat exec $commandArguments] } msg ]} {       set msg [regsub {\015*\012child[^\012]*$} $msg {}];       FME_LogMessage fme_warn 933454 WorkspaceRunner $workspaceFileUnix "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return FAILURE;    } else {       global WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_process_count;       incr WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_process_count;       if { {No} == {No} } {           FME_LogMessage fme_inform 933455 WorkspaceRunner $workspaceFileUnix;           global WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_all_processes;           lappend WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_all_processes $msg;       } else {           FME_LogMessage fme_inform 933456 WorkspaceRunner $workspaceFileUnix;       };       return SUCCESS;    }; }
# ------------------------------------------------------------------------------
# Create and write commands to command file

Tcl2 proc WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_writeCommandFile { commands } {    set commandFile [FME_TempFilename wsr_cm_];    if { [catch { set cmdFileId [open $commandFile "w"] } msg ] } {       FME_LogMessage fme_warn 933457 WorkspaceRunner $commandFile "\n\n$msg\n";       FME_SetAttribute _failure_message $msg;       return {};    };    fconfigure $cmdFileId -encoding utf-8;    puts $cmdFileId {#! encoding=\"utf-8\"};    puts $cmdFileId DELETE_FILE_AFTER_LOAD;    foreach {command} $commands {       puts $cmdFileId $command;    };    close $cmdFileId;    return $commandFile; }
# ------------------------------------------------------------------------------
# Use \x07 (BELL) character as the delimiter when writing WORKSPACE_PARAMETERS
# to mapping file
FACTORY_DEF * TestFactory    FACTORY_NAME WorkspaceRunner_ExecutorAndRouter    INPUT  FEATURE_TYPE Creator_CREATED_0_GJAgmIF9G6c=    TEST @Tcl2("WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_runner {()} {@EvaluateExpression(FDIV,STRING,$(FME_MF_DIR$encode)usgs<solidus>index.fmw,WorkspaceRunner)}") == SUCCESS    OUTPUT PASSED FEATURE_TYPE WorkspaceRunner_SUCCEEDED    OUTPUT FAILED FEATURE_TYPE WorkspaceRunner_FAILED
Tcl2 proc WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_summarizer { } {     global WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_process_count;     set comment { incr 0 creates the variable if it wasn't present };     incr WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_process_count 0;     FME_SetAttribute _proc_count [set WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_process_count];     global WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_all_processes;     if {[info exists WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_all_processes]} {         set index 0;         foreach pid [set WorkspaceRunner_c1f86136_93a5_48a8_84da_6faf93f48e230_all_processes] {             FME_SetAttribute \"_processes{$index}\" $pid;             incr index;         }     } }
FACTORY_DEF * CreationFactory    FACTORY_NAME WorkspaceRunner_SummaryMaker    CREATE_AT_END yes

# -------------------------------------------------------------------------

FACTORY_DEF * TeeFactory    FACTORY_NAME Logger_Logger    INPUT  FEATURE_TYPE WorkspaceRunner_SUCCEEDED    INPUT  FEATURE_TYPE WorkspaceRunner_FAILED    INPUT  FEATURE_TYPE WorkspaceRunner_2_SUCCEEDED    INPUT  FEATURE_TYPE WorkspaceRunner_2_FAILED    INPUT  FEATURE_TYPE WorkspaceRunner_3_SUCCEEDED    INPUT  FEATURE_TYPE WorkspaceRunner_3_FAILED    INPUT  FEATURE_TYPE WorkspaceRunner_4_SUCCEEDED    INPUT  FEATURE_TYPE WorkspaceRunner_4_FAILED    INPUT  FEATURE_TYPE WorkspaceRunner_5_SUCCEEDED    INPUT  FEATURE_TYPE WorkspaceRunner_5_FAILED    OUTPUT FEATURE_TYPE Logger_LOGGED                  @Log(ENCODED, "Logger:<space>Feature is:","20","20","",INFO,LOG_ONLY,Logger_630c8801_0551_4070_a08c_7b4ad953eba90)

FACTORY_DEF * TeeFactory   FACTORY_NAME "Logger LOGGED Transformer Output Nuker"   INPUT FEATURE_TYPE Logger_LOGGED
# -------------------------------------------------------------------------

FACTORY_DEF * RoutingFactory FACTORY_NAME "Destination Feature Type Routing Correlator"   COMMAND_PARM_EVALUATION SINGLE_PASS   INPUT FEATURE_TYPE *   FEATURE_TYPE_ATTRIBUTE __wb_out_feat_type__   OUTPUT ROUTED FEATURE_TYPE *    OUTPUT NOT_ROUTED FEATURE_TYPE __nuke_me__ @Tcl2("FME_StatMessage 818059 [FME_GetAttribute fme_template_feature_type] 818060 818061 fme_warn")
# -------------------------------------------------------------------------

FACTORY_DEF * TeeFactory   FACTORY_NAME "Final Output Nuker"   INPUT FEATURE_TYPE __nuke_me__

